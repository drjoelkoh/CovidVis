---
title: "Tomato Project: Covid Visualization"
author: "Daniel Lip, Pierre Chan, Howard Yeo, Joel Koh, Jolie Yeo, Danish Dol, Sarah Loo"
format: html
editor: visual
---

```{r}
# Load necessary libraries
library(tidyverse)
library(lubridate)
```

```{r}
# Load the dataset
covid_data <- read_csv("covid19_sg.csv")
covid_data

# Count total number of NA values before cleaning
total_na_before <- sum(is.na(covid_data))
print(paste("Total NA values before cleaning:", as.numeric(total_na_before)))

```

```{r}

# Clean dataset: replace NA in numeric columns with 0
covid_data <- covid_data %>%
  mutate(
    'Perc population completed at least one dose' = as.numeric(`Perc population completed at least one dose`),
    'Perc population completed vaccination' = as.numeric(`Perc population completed vaccination`),
    'Perc population taken booster shots' = as.numeric(`Perc population taken booster shots`),
  )

# Clean dataset: replace NA in numeric columns with 0
covid_clean <- covid_data %>%
  mutate(across(where(is.numeric), ~replace_na(., 0)))

# Count total number of 0s in numeric columns after cleaning
total_zeros_after <- covid_clean %>%
  select(where(is.numeric)) %>%
  summarise_all(~sum(. == 0)) %>%
  unlist() %>%
  sum()

print(paste("Total 0 values after cleaning:", as.numeric(total_zeros_after)))

```

```{r}
# Define fixed population and land area values (2020)
dorm_population <- 311100
dorm_land_area <- 5.0
community_population <- 5685807
community_land_area <- 723.3  # 728.3 - 5.0

# Add density-adjusted rates to the dataset
covid_clean <- covid_clean %>%
  mutate(
    dorm_cases_density_rate = (`Local cases residing in dorms MOH report` / dorm_population) * 100000 / dorm_land_area,
    community_cases_density_rate = (`Local cases not residing in doms MOH report` / community_population) * 100000 / community_land_area
  )

```

```{r}
#| label: Time Series Line Chart (Dormitory vs Community)
library(patchwork)
library(zoo)

# Filter data for focus period
covid_focus <- covid_clean %>%
  filter(Date >= as.Date("2020-04-01") & Date <= as.Date("2020-09-30")) %>%
  select(Date,
         Dormitory = `Local cases residing in dorms MOH report`,
         Community = `Local cases not residing in doms MOH report`) %>%
  mutate(
    Dormitory_MA = rollmean(Dormitory, k = 7, fill = NA, align = "right"),
    Community_MA = rollmean(Community, k = 7, fill = NA, align = "right"),
    Month = floor_date(Date, "month")
  )

# Dynamically compute monthly peak rows
dorm_peaks <- covid_focus %>%
  group_by(Month) %>%
  filter(Dormitory == max(Dormitory, na.rm = TRUE)) %>%
  slice(1) %>%  # Ensure only one row per month
  ungroup() %>%
  mutate(Label = paste0(format(Date, "%b %d"), ": ", Dormitory, " cases"),
         Month = floor_date(Month, "month"))  # Ensure it's 1st of month


comm_peaks <- covid_focus %>%
  group_by(Month) %>%
  filter(Community == max(Community, na.rm = TRUE)) %>%
  slice(1) %>%
  ungroup() %>%
  mutate(Label = paste0(format(Date, "%b %d"), ": ", Community, " cases"),
         Month = floor_date(Month, "month"))

# Point of interest (June 25)
annotate_point <- as.Date("2020-06-25")
annotate_y <- covid_focus %>% filter(Date == annotate_point) %>% pull(Dormitory_MA)

# Plot 1: Dormitory Cases
p1 <- ggplot(covid_focus, aes(x = Date)) +
  geom_line(
    aes(y = Dormitory, color = "Daily Cases"),
    alpha = 0.4) +
  geom_line(
    aes(y = Dormitory_MA, color = "Weekly Trend"),
    size = 1) +
  geom_vline(
    xintercept = as.Date("2020-04-07"),
    linetype = "dashed",
    color = "black") +
  geom_vline(
    xintercept = as.Date("2020-06-01"),
    linetype = "dashed",
    color = "black") +
  geom_text(
    data = dorm_peaks,
    aes(x = Month, y = -20, label = Label),
    inherit.aes = FALSE, 
    vjust = -0.8, size = 3, color = "navy") +
  geom_point(
    aes(x = annotate_point, y = annotate_y), 
    color = "navy", size = 2.5) + 
   geom_segment(
     aes(x = annotate_point, y = annotate_y, xend = annotate_point + 15, yend = annotate_y + 300),
     arrow = arrow(length = unit(0.15, "cm")),
     color = "navy", linetype = "dotted") +
  annotate("text", 
            x = as.Date("2020-04-10"), 
            y = max(covid_focus$Dormitory, na.rm = TRUE),
            label = "Start of Circuit Breaker",
            hjust = 0, vjust = -1.2, size = 3) +
  annotate("text",
           x = as.Date("2020-06-04"),
           y = max(covid_focus$Dormitory, na.rm = TRUE),
           label = "End of Circuit Breaker",
           hjust = 0, vjust = -1.2, size = 3) +
  annotate("text",
           x = annotate_point + 16,
           y = annotate_y + 300,
           label = "Aggressive testing & dorm clearance\n(MOH press release 25 Jun)",
           hjust = 0, size = 3, color = "navy") +
  scale_x_date(
    breaks = seq(as.Date("2020-04-01"), as.Date("2020-09-30"), by = "1 month"),
    date_labels = "%b",
    limits = c(as.Date("2020-04-01"), as.Date("2020-09-30"))
  ) +
  scale_color_manual(
    values = c("Daily Cases" = "steelblue", "Weekly Trend" = "navy")) +
  labs(
    title = "COVID-19 Cases in Migrant Worker Dormitories",
    subtitle = "Daily confirmed cases and weekly trend (Apr–Sep 2020)",
    caption = "- Weekly trend is a 7-day moving average used to smooth daily fluctuations.\n- Labeled dates indicate the highest number of cases recorded each month.",
    y = "Dormitory Cases", x = NULL, color = NULL) +
  theme_minimal() +
  theme(legend.position = "top")


# April spike annotation for Dormitory cases
combined_apr <- as.Date("2020-04-20")
combined_apr_y <- covid_focus %>% filter(Date == combined_apr) %>% pull(Dormitory_MA)

p1 <- p1 +
  geom_point(aes(x = combined_apr, y = combined_apr_y), color = "navy", size = 2.5) +
  geom_segment(aes(x = combined_apr, y = combined_apr_y,
                   xend = combined_apr + 17, yend = combined_apr_y + 350), arrow = arrow(length = unit(0.15, "cm")), color = "navy", linetype = "dotted") +
  annotate("text",
           x = combined_apr + 18,
           y = combined_apr_y + 350,
           label = "Record spike driven by ramped-up\ndormitory testing (Apr 20–28, MOH)",
           hjust = 0, size = 3, color = "navy")




# Plot 2: Community Cases
p2 <- ggplot(covid_focus, aes(x = Date)) +
  geom_line(aes(y = Community, color = "Daily Cases"), alpha = 0.4) +
  geom_line(aes(y = Community_MA, color = "Weekly Trend"), size = 1) +
  geom_vline(xintercept = as.Date("2020-04-07"), linetype = "dashed", color = "black") +
  geom_vline(xintercept = as.Date("2020-06-01"), linetype = "dashed", color = "black") +
  geom_text(data = comm_peaks, aes(x = Month, y = -20, label = Label),
          inherit.aes = FALSE, vjust = -0.8, size = 3, color = "firebrick") +
  annotate("text", x = as.Date("2020-04-10"), y = max(covid_focus$Community, na.rm = TRUE),
           label = "Start of Circuit Breaker", hjust = 0, vjust = -1.2, size = 3) +
  annotate("text", x = as.Date("2020-06-04"), y = max(covid_focus$Community, na.rm = TRUE),
           label = "End of Circuit Breaker", hjust = 0, vjust = -1.2, size = 3) +
  scale_x_date(
    breaks = seq(as.Date("2020-04-01"), as.Date("2020-09-30"), by = "1 month"),
    date_labels = "%b",
    limits = c(as.Date("2020-04-01"), as.Date("2020-09-30"))
  ) +
  scale_color_manual(values = c("Daily Cases" = "darkred", "Weekly Trend" = "firebrick")) +
  labs(
    title = "COVID-19 Cases in the Community",
    subtitle = "Daily confirmed cases and weekly trend (Apr–Sep 2020)",
    caption = "- Weekly trend is a 7-day moving average used to smooth daily fluctuations.\n- Labeled dates indicate the highest number of cases recorded each month.",
    y = "Community Cases", x = "Date", color = NULL
  ) +
  theme_minimal() +
  theme(legend.position = "top")

# Save each plot separately
ggsave("covid_dormitory_plot.png", p1, width = 12, height = 6)
ggsave("covid_community_plot.png", p2, width = 12, height = 6)

# Optionally display each one in sequence
p1
p2






```

```{r}
#| label: Monthly cases bar plot (Dormitory vs Community)
library(scales)

# Prepare monthly summary
monthly_cases <- covid_clean %>%
  filter(Date >= as.Date("2020-04-20") & Date <= as.Date("2020-09-07")) %>%
  mutate(Month = floor_date(Date, "month")) %>%
  group_by(Month) %>%
  summarise(
    Dormitory = sum(`Local cases residing in dorms MOH report`, na.rm = TRUE),
    Community = sum(`Local cases not residing in doms MOH report`, na.rm = TRUE)
  ) %>%
  pivot_longer(cols = c(Dormitory, Community), names_to = "Group", values_to = "Cases") %>%
  mutate(Month = factor(format(Month, "%b %Y"), levels = format(seq.Date(as.Date("2020-04-01"), as.Date("2020-09-01"), by = "month"), "%b %Y")))

# Plot
monthly_bar <- ggplot(monthly_cases, aes(x = Month, y = Cases, fill = Group)) +
  geom_col(position = position_dodge(width = 0.9)) +
  geom_text(
    aes(label = comma(Cases)),
    position = position_dodge(width = 0.9),
    vjust = -0.3,
    size = 3.5
  ) +
  scale_fill_manual(values = c("Dormitory" = "steelblue", "Community" = "darkred")) +
  labs(
    title = "Monthly COVID-19 Cases by Group",
    subtitle = "Summarised total cases in dormitories vs community (Apr–Sep 2020)",
    x = "Month", y = "Total Cases", fill = "Case Group"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Save and view
ggsave("monthly_covid_cases_grouped.png", monthly_bar, width = 10, height = 6)
monthly_bar

```

```{r}

library(tidyverse)
library(lubridate)
library(scales)

# 1) Load & filter Apr–Sep 2020
df <- read_csv("covid19_sg.csv", col_types = cols(
  Date = col_date(),
  `Local cases residing in dorms MOH report`    = col_double(),
  `Local cases not residing in doms MOH report` = col_double(),
  Phase = col_character()
)) %>%
  filter(Date >= ymd("2020-04-01"), Date <= ymd("2020-09-30")) %>%
  mutate(
    dorm  = `Local cases residing in dorms MOH report`,
    comm  = `Local cases not residing in doms MOH report`,
    Month = floor_date(Date, "month")
  )

# 2) Summarise + build labels
monthly <- df %>%
  group_by(Month) %>%
  summarise(
    dorm  = sum(dorm, na.rm = TRUE),
    comm  = sum(comm, na.rm = TRUE),
    Phase = Phase %>% table() %>% which.max() %>% names()
  ) %>%
  ungroup() %>%
  mutate(
    label = paste0(format(Month, "%b %Y"), "\n(", Phase, ")")
  )

# 3) Pivot longer for ggplot
monthly_long <- monthly %>%
  select(label, dorm, comm) %>%
  pivot_longer(c(dorm, comm),
               names_to  = "Type",
               values_to = "Count") %>%
  mutate(
    Type = recode(Type,
                  dorm = "Dormitory cases",
                  comm = "Community cases"),
    label = factor(label, levels = monthly$label)  # preserve order
  )

# 4) Plot
month_phase_plot <- ggplot(monthly_long, aes(x = label, y = Count, fill = Type)) +
  geom_col(position = position_dodge(width = 0.7),
           width    = 0.6,
           color    = "grey20") +
  geom_text(aes(label = comma(Count)),
            position = position_dodge(width = 0.7),
            vjust    = -0.5,
            size     = 3) +
  scale_fill_manual(
    values = c("Community cases" = "#ff7f0e",
               "Dormitory cases" = "#1f77b4")
  ) +
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))
  ) +
  theme_light(base_size = 12) +
  theme(
    axis.text.x       = element_text(angle = 45, hjust = 1),
    panel.grid.major.x = element_blank(),
    panel.grid.minor   = element_blank(),
    legend.position    = "top",
    legend.title       = element_blank(),
    plot.title         = element_text(face = "bold", hjust = 0.5, size = 14)
  ) +
  labs(
    x     = "Month (Phase)",
    y     = "Total Cases",
    title = "COVID-19 Cases Apr–Sep 2020 by Month & Phase"
  )

ggsave("covid_cases_by_month_phase.png", plot = month_phase_plot,
       width = 10, height = 6, dpi = 300,
       device = "png", bg = "white")

month_phase_plot
```

```{r}
library(tidyr)
library(ggplot2)

# Prepare long-form data
covid_long <- covid_clean %>%
  select(Date, dorm_cases_density_rate, community_cases_density_rate) %>%
  pivot_longer(cols = -Date, names_to = "Group", values_to = "Rate") %>%
  mutate(
    Date = as.Date(Date),
    Group = recode(Group,
                   "dorm_cases_density_rate" = "Dormitories",
                   "community_cases_density_rate" = "Community")
  ) %>%
  filter(Date >= as.Date("2020-04-01") & Date <= as.Date("2020-09-30"))

# Find dormitory peak
peak_dorm <- covid_long %>%
  filter(Group == "Dormitories") %>%
  filter(Rate == max(Rate, na.rm = TRUE)) %>%
  slice(1)

peak_date <- peak_dorm$Date
peak_rate <- peak_dorm$Rate

# Plot
density_plot <- ggplot(covid_long, aes(x = Date, y = Rate, color = Group)) +
  geom_line(size = 0.8) +

  # LOESS smoothing for Dormitories only
  geom_smooth(
    data = covid_long %>% filter(Group == "Dormitories"),
    aes(x = Date, y = Rate),
    se = FALSE, method = "loess", span = 0.2,
    color = "steelblue", size = 1
  ) +

  # Label the LOESS line
  annotate("text", x = as.Date("2020-08-15"), y = 18,
           label = "LOESS (Dormitories)", color = "steelblue", size = 3.5, hjust = 0) +

  # Peak dorm point and label
  geom_point(data = peak_dorm, aes(x = Date, y = Rate), color = "steelblue", size = 2.5) +
  annotate("text",
           x = peak_date + 5,
           y = peak_rate,
           label = paste0("Peak: ", round(peak_rate, 1), "\ncases/100k/km²"),
           hjust = 0,
           size = 3.5,
           color = "steelblue") +

  # Color scale
  scale_color_manual(values = c("Dormitories" = "steelblue", "Community" = "firebrick")) +

  # Axis setup
  scale_x_date(
    breaks = seq(as.Date("2020-04-01"), as.Date("2020-09-30"), by = "1 month"),
    date_labels = "%b",
    limits = c(as.Date("2020-04-01"), as.Date("2020-09-30"))
  ) +

  # Circuit Breaker vertical lines and horizontal labels
  geom_vline(xintercept = as.Date("2020-04-07"), linetype = "dashed", color = "black") +
  geom_vline(xintercept = as.Date("2020-06-01"), linetype = "dashed", color = "black") +
  annotate("text", x = as.Date("2020-04-07"), y = 88,
           label = "Start of Circuit Breaker", size = 3, color = "black", hjust = 0.5) +
  annotate("text", x = as.Date("2020-06-01"), y = 88,
           label = "End of Circuit Breaker", size = 3, color = "black", hjust = 0.5) +

  # Disparity annotation
  annotate("text", x = as.Date("2020-06-01"), y = 55,
           label = "Dormitories had up to\n80× higher intensity",
           color = "steelblue", size = 4, hjust = 0) +

  # Styling with expanded margins
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "top",
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 13),
    plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
  ) +
  labs(
    title = "COVID-19 Case Rates Adjusted for Population Density",
    subtitle = "Cases per 100,000 people per km² (Apr–Sep 2020)",
    x = "Date",
    y = "Density-Adjusted Case Rate",
    color = "Population Group"
  )

# Save the plot (JPG or PNG)
ggsave("covid_density_rates_sg.png",
       plot = density_plot,
       width = 10, height = 6, dpi = 300,
       device = "png", bg = "white")

# Optionally display
density_plot


```

```{r}
png("covid_severity_radar.png", width = 1200, height = 800, res = 150)

library(tidyverse)
library(fmsb)
library(lubridate)

# Summarise total counts
covid_severity_summary <- covid_clean %>%
  filter(Date >= as.Date("2020-04-01") & Date <= as.Date("2020-09-30")) %>%
  summarise(
    TotalDeaths = sum(`Daily Deaths`, na.rm = TRUE),
    TotalICU = sum(`Intensive Care Unit (ICU)`, na.rm = TRUE),
    TotalHospitalised = sum(`Still Hospitalised`, na.rm = TRUE)
  )

# Log-transform + scale to [0,100]
log_scaled <- covid_severity_summary %>%
  mutate(
    Deaths = log1p(TotalDeaths),
    ICU = log1p(TotalICU),
    Hospitalised = log1p(TotalHospitalised)
  ) %>%
  select(Deaths, ICU, Hospitalised)

log_max <- max(log_scaled)
scaled_values <- log_scaled / log_max * 100
scaled_values <- round(scaled_values, 2)

# Prepare radar data
radar_data <- rbind(
  c(100, 100, 100),               # Max
  c(0, 0, 0),                     # Min
  as.numeric(scaled_values)      # Actual values
)
radar_data <- as.data.frame(radar_data)
colnames(radar_data) <- c("", "", "")
rownames(radar_data) <- c("Max", "Min", "Severity")

# Radar chart
radarchart(
  radar_data,
  axistype = 1,
  pcol = "darkred",
  pfcol = rgb(0.8, 0.2, 0.2, 0.4),
  plwd = 2,
  plty = 1,
  title = "COVID-19 Severity Radar: Apr–Sep 2020 (Log Scaled 0–100)",
  cglcol = "grey70", cglty = 1, cglwd = 0.8,
  axislabcol = "grey20",
  caxislabels = seq(0, 100, by = 25),
  vlcex = 0.9
)

# Add raw values next to axis labels
label_angles_deg <- c(90, 210, 330)
label_angles_rad <- label_angles_deg * pi / 180
label_radius <- 1.15  # place labels slightly outside the radar

label_texts <- c(
  paste0("Deaths (", covid_severity_summary$TotalDeaths, ")"),
  paste0("ICU (", covid_severity_summary$TotalICU, ")"),
  paste0("Hospitalised (", covid_severity_summary$TotalHospitalised, ")")
)

for (i in 1:3) {
  x <- label_radius * cos(label_angles_rad[i])
  y <- label_radius * sin(label_angles_rad[i])
  text(x, y, labels = label_texts[i], cex = 0.9, font = 2)
}

# === Legends ===
legend("topright",
       legend = c("Proportional Severity"),
       col = "darkred", lty = 1, lwd = 2, bty = "n")

legend("bottomleft",
       legend = c("0 = Lowest log-scaled severity", "100 = Highest log-scaled severity"),
       text.col = "grey20", bty = "n", cex = 0.8)

dev.off()


```
