---
title: "Tomato Project: Covid Visualization"
author: "Daniel Lip, Pierre Chan, Howard Yeo, Joel Koh, Jolie Yeo, Danish Dol, Sarah Loo"
format: 
  html:
    self-contained: false  
    embed-resources: false
editor: visual
---

```{r}
# Load necessary libraries
library(tidyverse)
library(lubridate)
```

```{r}
# Load the dataset
covid_data <- read_csv("covid19_sg.csv")
covid_data

# Count total number of NA values before cleaning
total_na_before <- sum(is.na(covid_data))
print(paste("Total NA values before cleaning:", as.numeric(total_na_before)))

```

```{r}

# Clean dataset: replace NA in numeric columns with 0
covid_data <- covid_data %>%
  mutate(
    'Perc population completed at least one dose' = as.numeric(`Perc population completed at least one dose`),
    'Perc population completed vaccination' = as.numeric(`Perc population completed vaccination`),
    'Perc population taken booster shots' = as.numeric(`Perc population taken booster shots`),
  )

# Clean dataset: replace NA in numeric columns with 0
covid_clean <- covid_data %>%
  mutate(across(where(is.numeric), ~replace_na(., 0)))

# Count total number of 0s in numeric columns after cleaning
total_zeros_after <- covid_clean %>%
  select(where(is.numeric)) %>%
  summarise_all(~sum(. == 0)) %>%
  unlist() %>%
  sum()

print(paste("Total 0 values after cleaning:", as.numeric(total_zeros_after)))

```

```{r}
# Define fixed population and land area values (2020)
dorm_population <- 311100
dorm_land_area <- 5.0
community_population <- 5685807
community_land_area <- 723.3  # 728.3 - 5.0

# Add density-adjusted rates to the dataset
covid_clean <- covid_clean %>%
  mutate(
    dorm_cases_density_rate = (`Local cases residing in dorms MOH report` / dorm_population) * 100000 / dorm_land_area,
    community_cases_density_rate = (`Local cases not residing in doms MOH report` / community_population) * 100000 / community_land_area
  )

```

```{r}
#| label: Time Series Line Chart (Dormitory vs Community)
library(patchwork)
library(zoo)

# Filter data for focus period
covid_focus <- covid_clean %>%
  filter(Date >= as.Date("2020-04-01") & Date <= as.Date("2020-09-30")) %>%
  select(Date,
         Dormitory = `Local cases residing in dorms MOH report`,
         Community = `Local cases not residing in doms MOH report`) %>%
  mutate(
    Dormitory_MA = rollmean(Dormitory, k = 7, fill = NA, align = "right"),
    Community_MA = rollmean(Community, k = 7, fill = NA, align = "right"),
    Month = floor_date(Date, "month")
  )

# Dynamically compute monthly peak rows
dorm_peaks <- covid_focus %>%
  group_by(Month) %>%
  filter(Dormitory == max(Dormitory, na.rm = TRUE)) %>%
  slice(1) %>%  # Ensure only one row per month
  ungroup() %>%
  mutate(Label = paste0(format(Date, "%b %d"), ": ", Dormitory, " cases"),
         Month = floor_date(Month, "month"))  # Ensure it's 1st of month


comm_peaks <- covid_focus %>%
  group_by(Month) %>%
  filter(Community == max(Community, na.rm = TRUE)) %>%
  slice(1) %>%
  ungroup() %>%
  mutate(Label = paste0(format(Date, "%b %d"), ": ", Community, " cases"),
         Month = floor_date(Month, "month"))

# Point of interest (June 25)
annotate_point <- as.Date("2020-06-25")
annotate_y <- covid_focus %>% filter(Date == annotate_point) %>% pull(Dormitory_MA)

# Plot 1: Dormitory Cases
p1 <- ggplot(covid_focus, aes(x = Date)) +
  geom_line(
    aes(y = Dormitory, color = "Daily Cases"),
    alpha = 0.4) +
  geom_line(
    aes(y = Dormitory_MA, color = "Weekly Trend"),
    size = 1) +
  geom_vline(
    xintercept = as.Date("2020-04-07"),
    linetype = "dashed",
    color = "black") +
  geom_vline(
    xintercept = as.Date("2020-06-01"),
    linetype = "dashed",
    color = "black") +
  geom_text(
    data = dorm_peaks,
    aes(x = Month, y = -20, label = Label),
    inherit.aes = FALSE, 
    vjust = -0.8, size = 3, color = "navy") +
  geom_point(
    aes(x = annotate_point, y = annotate_y), 
    color = "navy", size = 2.5) + 
   geom_segment(
     aes(x = annotate_point, y = annotate_y, xend = annotate_point + 15, yend = annotate_y + 300),
     arrow = arrow(length = unit(0.15, "cm")),
     color = "navy", linetype = "dotted") +
  annotate("text", 
            x = as.Date("2020-04-10"), 
            y = max(covid_focus$Dormitory, na.rm = TRUE),
            label = "Start of Circuit Breaker",
            hjust = 0, vjust = -1.2, size = 3) +
  annotate("text",
           x = as.Date("2020-06-04"),
           y = max(covid_focus$Dormitory, na.rm = TRUE),
           label = "End of Circuit Breaker",
           hjust = 0, vjust = -1.2, size = 3) +
  annotate("text",
           x = annotate_point + 16,
           y = annotate_y + 300,
           label = "Aggressive testing & dorm clearance\n(MOH press release 25 Jun)",
           hjust = 0, size = 3, color = "navy") +
  scale_x_date(
    breaks = seq(as.Date("2020-04-01"), as.Date("2020-09-30"), by = "1 month"),
    date_labels = "%b",
    limits = c(as.Date("2020-04-01"), as.Date("2020-09-30"))
  ) +
  scale_color_manual(
    values = c("Daily Cases" = "steelblue", "Weekly Trend" = "navy")) +
  labs(
    title = "COVID-19 Cases in Migrant Worker Dormitories",
    subtitle = "Daily confirmed cases and weekly trend (Apr–Sep 2020)",
    caption = "- Weekly trend is a 7-day moving average used to smooth daily fluctuations.\n- Labeled dates indicate the highest number of cases recorded each month.",
    y = "Dormitory Cases", x = NULL, color = NULL) +
  theme_minimal() +
  theme(legend.position = "top")


# April spike annotation for Dormitory cases
combined_apr <- as.Date("2020-04-20")
combined_apr_y <- covid_focus %>% filter(Date == combined_apr) %>% pull(Dormitory_MA)

p1 <- p1 +
  geom_point(aes(x = combined_apr, y = combined_apr_y), color = "navy", size = 2.5) +
  geom_segment(aes(x = combined_apr, y = combined_apr_y,
                   xend = combined_apr + 17, yend = combined_apr_y + 350), arrow = arrow(length = unit(0.15, "cm")), color = "navy", linetype = "dotted") +
  annotate("text",
           x = combined_apr + 18,
           y = combined_apr_y + 350,
           label = "Record spike driven by ramped-up\ndormitory testing (Apr 20–28, MOH)",
           hjust = 0, size = 3, color = "navy")




# Plot 2: Community Cases
p2 <- ggplot(covid_focus, aes(x = Date)) +
  geom_line(aes(y = Community, color = "Daily Cases"), alpha = 0.4) +
  geom_line(aes(y = Community_MA, color = "Weekly Trend"), size = 1) +
  geom_vline(xintercept = as.Date("2020-04-07"), linetype = "dashed", color = "black") +
  geom_vline(xintercept = as.Date("2020-06-01"), linetype = "dashed", color = "black") +
  geom_text(data = comm_peaks, aes(x = Month, y = -20, label = Label),
          inherit.aes = FALSE, vjust = -0.8, size = 3, color = "firebrick") +
  annotate("text", x = as.Date("2020-04-10"), y = max(covid_focus$Community, na.rm = TRUE),
           label = "Start of Circuit Breaker", hjust = 0, vjust = -1.2, size = 3) +
  annotate("text", x = as.Date("2020-06-04"), y = max(covid_focus$Community, na.rm = TRUE),
           label = "End of Circuit Breaker", hjust = 0, vjust = -1.2, size = 3) +
  scale_x_date(
    breaks = seq(as.Date("2020-04-01"), as.Date("2020-09-30"), by = "1 month"),
    date_labels = "%b",
    limits = c(as.Date("2020-04-01"), as.Date("2020-09-30"))
  ) +
  scale_color_manual(values = c("Daily Cases" = "darkred", "Weekly Trend" = "firebrick")) +
  labs(
    title = "COVID-19 Cases in the Community",
    subtitle = "Daily confirmed cases and weekly trend (Apr–Sep 2020)",
    caption = "- Weekly trend is a 7-day moving average used to smooth daily fluctuations.\n- Labeled dates indicate the highest number of cases recorded each month.",
    y = "Community Cases", x = "Date", color = NULL
  ) +
  theme_minimal() +
  theme(legend.position = "top")

# Save each plot separately
ggsave("covid_dormitory_plot.png", p1, width = 12, height = 6)
ggsave("covid_community_plot.png", p2, width = 12, height = 6)

# Optionally display each one in sequence
p1
p2






```

```{r}
#| label: Monthly cases bar plot (Dormitory vs Community)
library(scales)

# Prepare monthly summary
monthly_cases <- covid_clean %>%
  filter(Date >= as.Date("2020-04-20") & Date <= as.Date("2020-09-07")) %>%
  mutate(Month = floor_date(Date, "month")) %>%
  group_by(Month) %>%
  summarise(
    Dormitory = sum(`Local cases residing in dorms MOH report`, na.rm = TRUE),
    Community = sum(`Local cases not residing in doms MOH report`, na.rm = TRUE)
  ) %>%
  pivot_longer(cols = c(Dormitory, Community), names_to = "Group", values_to = "Cases") %>%
  mutate(Month = factor(format(Month, "%b %Y"), levels = format(seq.Date(as.Date("2020-04-01"), as.Date("2020-09-01"), by = "month"), "%b %Y")))

# Plot
monthly_bar <- ggplot(monthly_cases, aes(x = Month, y = Cases, fill = Group)) +
  geom_col(position = position_dodge(width = 0.9)) +
  geom_text(
    aes(label = comma(Cases)),
    position = position_dodge(width = 0.9),
    vjust = -0.3,
    size = 3.5
  ) +
  scale_fill_manual(values = c("Dormitory" = "steelblue", "Community" = "darkred")) +
  labs(
    title = "Monthly COVID-19 Cases by Group",
    subtitle = "Summarised total cases in dormitories vs community (Apr–Sep 2020)",
    x = "Month", y = "Total Cases", fill = "Case Group"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Save and view
ggsave("monthly_covid_cases_grouped.png", monthly_bar, width = 10, height = 6)
monthly_bar

```

```{r}

library(tidyverse)
library(lubridate)
library(scales)

# 1) Load & filter Apr–Sep 2020
df <- read_csv("covid19_sg.csv", col_types = cols(
  Date = col_date(),
  `Local cases residing in dorms MOH report`    = col_double(),
  `Local cases not residing in doms MOH report` = col_double(),
  Phase = col_character()
)) %>%
  filter(Date >= ymd("2020-04-01"), Date <= ymd("2020-09-30")) %>%
  mutate(
    dorm  = `Local cases residing in dorms MOH report`,
    comm  = `Local cases not residing in doms MOH report`,
    Month = floor_date(Date, "month")
  )

# 2) Summarise + build labels
monthly <- df %>%
  group_by(Month) %>%
  summarise(
    dorm  = sum(dorm, na.rm = TRUE),
    comm  = sum(comm, na.rm = TRUE),
    Phase = Phase %>% table() %>% which.max() %>% names()
  ) %>%
  ungroup() %>%
  mutate(
    label = paste0(format(Month, "%b %Y"), "\n(", Phase, ")")
  )

# 3) Pivot longer for ggplot
monthly_long <- monthly %>%
  select(label, dorm, comm) %>%
  pivot_longer(c(dorm, comm),
               names_to  = "Type",
               values_to = "Count") %>%
  mutate(
    Type = recode(Type,
                  dorm = "Dormitory cases",
                  comm = "Community cases"),
    label = factor(label, levels = monthly$label)  # preserve order
  )

# 4) Plot
month_phase_plot <- ggplot(monthly_long, aes(x = label, y = Count, fill = Type)) +
  geom_col(position = position_dodge(width = 0.7),
           width    = 0.6,
           color    = "grey20") +
  geom_text(aes(label = comma(Count)),
            position = position_dodge(width = 0.7),
            vjust    = -0.5,
            size     = 3) +
  scale_fill_manual(
    values = c("Community cases" = "#ff7f0e",
               "Dormitory cases" = "#1f77b4")
  ) +
  scale_y_continuous(
    expand = expansion(mult = c(0, 0.05))
  ) +
  theme_light(base_size = 12) +
  theme(
    axis.text.x       = element_text(angle = 45, hjust = 1),
    panel.grid.major.x = element_blank(),
    panel.grid.minor   = element_blank(),
    legend.position    = "top",
    legend.title       = element_blank(),
    plot.title         = element_text(face = "bold", hjust = 0.5, size = 14)
  ) +
  labs(
    x     = "Month (Phase)",
    y     = "Total Cases",
    title = "COVID-19 Cases Apr–Sep 2020 by Month & Phase"
  )

ggsave("covid_cases_by_month_phase.png", plot = month_phase_plot,
       width = 10, height = 6, dpi = 300,
       device = "png", bg = "white")

month_phase_plot
```

```{r}
library(tidyr)
library(ggplot2)

# Prepare long-form data
covid_long <- covid_clean %>%
  select(Date, dorm_cases_density_rate, community_cases_density_rate) %>%
  pivot_longer(cols = -Date, names_to = "Group", values_to = "Rate") %>%
  mutate(
    Date = as.Date(Date),
    Group = recode(Group,
                   "dorm_cases_density_rate" = "Dormitories",
                   "community_cases_density_rate" = "Community")
  ) %>%
  filter(Date >= as.Date("2020-04-01") & Date <= as.Date("2020-09-30"))

# Find dormitory peak
peak_dorm <- covid_long %>%
  filter(Group == "Dormitories") %>%
  filter(Rate == max(Rate, na.rm = TRUE)) %>%
  slice(1)

peak_date <- peak_dorm$Date
peak_rate <- peak_dorm$Rate

# Plot
density_plot <- ggplot(covid_long, aes(x = Date, y = Rate, color = Group)) +
  geom_line(size = 0.8) +

  # LOESS smoothing for Dormitories only
  geom_smooth(
    data = covid_long %>% filter(Group == "Dormitories"),
    aes(x = Date, y = Rate),
    se = FALSE, method = "loess", span = 0.2,
    color = "steelblue", size = 1
  ) +

  # Label the LOESS line
  annotate("text", x = as.Date("2020-08-15"), y = 18,
           label = "LOESS (Dormitories)", color = "steelblue", size = 3.5, hjust = 0) +

  # Peak dorm point and label
  geom_point(data = peak_dorm, aes(x = Date, y = Rate), color = "steelblue", size = 2.5) +
  annotate("text",
           x = peak_date + 5,
           y = peak_rate,
           label = paste0("Peak: ", round(peak_rate, 1), "\ncases/100k/km²"),
           hjust = 0,
           size = 3.5,
           color = "steelblue") +

  # Color scale
  scale_color_manual(values = c("Dormitories" = "steelblue", "Community" = "firebrick")) +

  # Axis setup
  scale_x_date(
    breaks = seq(as.Date("2020-04-01"), as.Date("2020-09-30"), by = "1 month"),
    date_labels = "%b",
    limits = c(as.Date("2020-04-01"), as.Date("2020-09-30"))
  ) +

  # Circuit Breaker vertical lines and horizontal labels
  geom_vline(xintercept = as.Date("2020-04-07"), linetype = "dashed", color = "black") +
  geom_vline(xintercept = as.Date("2020-06-01"), linetype = "dashed", color = "black") +
  annotate("text", x = as.Date("2020-04-07"), y = 88,
           label = "Start of Circuit Breaker", size = 3, color = "black", hjust = 0.5) +
  annotate("text", x = as.Date("2020-06-01"), y = 88,
           label = "End of Circuit Breaker", size = 3, color = "black", hjust = 0.5) +

  # Disparity annotation
  annotate("text", x = as.Date("2020-06-01"), y = 55,
           label = "Dormitories had up to\n80× higher intensity",
           color = "steelblue", size = 4, hjust = 0) +

  # Styling with expanded margins
  theme_minimal(base_size = 14) +
  theme(
    legend.position = "top",
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 13),
    plot.margin = margin(t = 20, r = 20, b = 20, l = 20)
  ) +
  labs(
    title = "COVID-19 Case Rates Adjusted for Population Density",
    subtitle = "Cases per 100,000 people per km² (Apr–Sep 2020)",
    x = "Date",
    y = "Density-Adjusted Case Rate",
    color = "Population Group"
  )

# Save the plot (JPG or PNG)
ggsave("covid_density_rates_sg.png",
       plot = density_plot,
       width = 10, height = 6, dpi = 300,
       device = "png", bg = "white")

# Optionally display
density_plot


```

```{r}
# Load libraries
library(tidyverse)
library(ggridges)
library(lubridate)

# Read and clean the data
df <- read_csv("covid19_sg.csv")

# Select and reshape the data
df_long <- df %>%
  select(Date,
         Dorm = `Local cases residing in dorms MOH report`,
         Community = `Local cases not residing in doms MOH report`) %>%
  mutate(Date = ymd(Date)) %>%
  pivot_longer(cols = c(Dorm, Community), names_to = "Group", values_to = "Cases") %>%
  drop_na(Cases)

# Add Month as a categorical variable
df_long <- df_long %>%
  mutate(Month = month(Date, label = TRUE, abbr = TRUE))

# Plot: overlapping ridgelines by month
ggplot(df_long, aes(x = Cases, y = fct_rev(Month), color = Group, fill = Group)) +
  geom_density_ridges(alpha = 0.4, scale = 3, rel_min_height = 0.01) +
  labs(title = "COVID-19 Cases in Singapore: Community vs Dorms",
       x = "Number of Cases",
       y = "Month",
       fill = "Group",
       color = "Group") +
  scale_fill_manual(values = c("Dorm" = "#FF6B6B", "Community" = "#4D96FF")) +
  scale_color_manual(values = c("Dorm" = "#FF6B6B", "Community" = "#4D96FF")) +
  theme_minimal()

```

```{r}
# Install and load required packages
library(leaflet)
library(leaflet.extras)

# Prepare your cluster data with coordinates and case counts
cluster_data <- data.frame(
  Cluster = c("Westlite Toh Guan", "Yong Thai Hang (Lavender)", "Seletar Aerospace Heights",
              "Wizlearn Technologies Pte Ltd", "Shaw Lodge", "Cochrane Lodge I",
              "Sungei Kadut Avenue", "S11 Dormitory", "Cassia @ Penjuru",
              "North Coast Lodge", "Kranji Lodge I", "Sungei Tengah Lodge",
              "Tuas View Dormitory", "Acacia Lodge", "Kallang Dormitory",
              "Woodlands Industrial Park E", "McDonald’s (Example)",
              "Kenyon/UBS construction site (9 Penang Road)", "Tampines Dormitory",
              "CitiWall", "Westlite Woodlands dormitory", "Project Glory",
              "Keppel Shipyard", "NUH renovation site 2", "Kian Teck Crescent dormitory",
              "Kian Teck Dormitory", "ABC Hostel", "Balestier Road",
              "Tech Park Crescent dormitory", "PPT Lodge 1", "A18 Cochrane Lodge II",
              "Toh Guan Dormitory", "Mandai Lodge", "B Senoko Loop", "Kranji Dormitory"),
  
  Latitude = c(1.3396, 1.3090, 1.4168, 1.2891, 1.3113, 1.4587,
               1.4326, 1.4429, 1.3178, 1.4727, 1.4402, 1.4057,
               1.2829, 1.3401, 1.3115, 1.4452, 1.3371,
               1.2995, 1.3533, 1.282375, 1.4439, 1.2801,
               1.264, 1.2933, 1.3288,
               1.3306, 1.3039, 1.32506,
               1.3276, 1.4177, 1.46138,
               1.3400, 1.4116, 1.4637, 1.4402),
  
  Longitude = c(103.7431, 103.8610, 103.8828, 103.8443, 103.8488, 103.8183,
                103.7479, 103.7712, 103.7317, 103.8048, 103.7548, 103.7297,
                103.6393, 103.7545, 103.8687, 103.7788, 103.7791,
                103.8436, 103.9557, 103.864273, 103.7847, 103.8496,
                103.840, 103.7848, 103.6943,
                103.6912, 103.8587, 103.85054,
                103.6997, 103.8971, 103.81811,
                103.7430, 103.7863, 103.8018, 103.7548),

  Cases = c(110, 9, 5, 14, 24, 5331, 31, 797, 15, 18, 20, 279, 43, 5685,
            536, 127, 5, 15, 61, 6, 10, 49, 22, 610, 4, 3, 7234, 8,
            19, 1, 46, 83, 721, 20, 9)
)

# Create the heatmap
leaflet(cluster_data) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addHeatmap(
    lng = ~Longitude,
    lat = ~Latitude,
    intensity = ~Cases,
    blur = 1,                # Less blur = sharper glow
    max = max(cluster_data$Cases), # Keeps true scale
    radius = 10,              # Bigger radius = more area glow
    minOpacity = 0.4          # Makes low-intensity areas visible
  )
```

```{r}
library(plotly)
library(dplyr)
library(png) 

# Your cluster data
cluster_data <- data.frame(
  Cluster = c(
    "Westlite Toh Guan", "Seletar Aerospace Heights", "Wizlearn Technologies Pte Ltd",
    "Shaw Lodge", "Cochrane Lodge I", "Sungei Kadut Avenue", "S11 Dormitory",
    "Cassia @ Penjuru", "North Coast Lodge", "Kranji Lodge I", "Sungei Tengah Lodge",
    "Tuas View Dormitory", "Acacia Lodge", "Kallang Dormitory",
    "Woodlands Industrial Park E", "Kenyon/UBS construction site (9 Penang Road)",
    "Tampines Dormitory", "CitiWall", "Westlite Woodlands dormitory", "Project Glory",
    "Keppel Shipyard", "NUH renovation site 2", "Kian Teck Crescent dormitory",
    "Kian Teck Dormitory", "ABC Hostel", "Balestier Road", "Tech Park Crescent dormitory",
    "PPT Lodge 1A", "Cochrane Lodge II", "Toh Guan Dormitory", "Mandai Lodge",
    "B Senoko Loop", "Kranji Dormitory"
  ),
  Cases = c(
    110, 5, 14, 24, 5331, 31, 797, 15, 18, 20, 279, 43, 5685, 536,
    127, 15, 61, 6, 10, 49, 22, 610, 4, 3, 7234, 8, 19, 18, 46, 83,
    721, 20, 9
  ),
  Latitude = c(
    1.336479358252648, 1.405865108244157, 1.30455377557605, 1.3123931576684158,
    1.45980644632813, 1.4028727458862023, 1.4166802873317088,
    1.317990063252798, 1.4561262461581825, 1.431649046119088,
    1.3760170864098327, 1.3138839535281888, 1.3394634394670428,
    1.3105636318064642, 1.4539726758703109, 1.2981204015689285,
    1.3671327420712016, 1.335226990236874, 1.4614094228419052,
    1.2843814379289338, 1.3035148050097214, 1.293712275930711,
    1.3332887118197039, 1.3292575192376144, 1.3037227535727711,
    1.3264861535659809, 1.3094899804568734, 1.4196894054884313,
    1.461247043493767, 1.3383098374070241, 1.4065971113532223,
    1.4597830860053411, 1.4317777521462383
  ),
  Longitude = c(
    103.75174062577297, 103.86573001267531, 103.79681529986875,
    103.99766514435049, 103.820089270923, 103.75460492868525,
    103.89541919879917, 103.73190240862799, 103.78739209852215,
    103.7598430709199, 103.71880627142167, 103.62573649988938,
    103.75537536805872, 103.86661337195711, 103.79760132378739,
    103.84465551129118, 103.92941526872715, 103.90700675633154,
    103.80957678863217, 103.85011283824487, 103.65495391247237,
    103.78325522624701, 103.69239212193627, 103.69476187004331,
    103.8593811971341, 103.84630191556397, 103.63029946555761,
    103.89632074153567, 103.81837290111845, 103.75317797010463,
    103.76033024674389, 103.80255495616179, 103.75983234219238
  )
)

# Convert to numeric
cluster_data$Latitude <- as.numeric(cluster_data$Latitude)
cluster_data$Longitude <- as.numeric(cluster_data$Longitude)
cluster_data$Cases <- as.numeric(cluster_data$Cases)

# Map bounds
map_lon_min <- 103.56
map_lon_max <- 104.11
map_lat_min <- 1.14
map_lat_max <- 1.475

# Function to create the map surface
create_map_surface <- function(image_file, lon_range, lat_range, z_level = 0) {
  tryCatch({
    img <- readPNG(image_file)
    img_height <- dim(img)[1]; img_width <- dim(img)[2]
    x_seq <- seq(lon_range[1], lon_range[2], length.out = img_width)
    y_seq <- seq(lat_range[1], lat_range[2], length.out = img_height)
    z_surface <- matrix(z_level, nrow = img_height, ncol = img_width)
    if(length(dim(img)) == 3) {
      img_for_surface <- img[,,1] * 0.8 + img[,,2] * 0.1 + img[,,3] * 0.1
    } else {
      img_for_surface <- img
    }
    img_for_surface <- img_for_surface[nrow(img_for_surface):1, ]
    return(list(x=x_seq, y=y_seq, z=z_surface, surfacecolor=img_for_surface))
  }, error = function(e) { message("Could not read image file: ", e$message); return(NULL) })
}

create_enhanced_3d_plot <- function(data, map_surface = NULL) {
  # Add a log-transformed column for both coloring AND height
  data <- data %>% mutate(LogCases = log1p(Cases))
  
  # --- DATA RESTRUCTURING FOR BARS (now using log scale for heights) ---
  segments_data <- bind_rows(
    data %>% mutate(z = 0), # Start points (still at 0)
    data %>% mutate(z = LogCases)  # End points (now log-scaled)
  ) %>% arrange(Cluster) # Arrange to group start/end points for the 'split' argument

  # Define the range for the color scale based on the log-transformed values
  min_log_cases <- min(data$LogCases)
  max_log_cases <- max(data$LogCases)
  
  # Create base plot
  p <- plot_ly()
  
  # Add map surface
  if(!is.null(map_surface)) {
    p <- p %>% add_surface(
      x = map_surface$x, y = map_surface$y, z = map_surface$z,
      surfacecolor = map_surface$surfacecolor,
      colorscale = list(c(0, "rgb(50,50,50)"), c(1, "rgb(200,200,200)")),
      opacity = 0.8, showscale = FALSE, hoverinfo = "skip", name = "Singapore Map"
    )
  }
  
  # --- Add all bars in a single call (now with log-scaled heights) ---
  p <- p %>% add_trace(
    data = segments_data,
    type = "scatter3d",
    mode = "lines",
    x = ~Longitude, y = ~Latitude, z = ~z,
    split = ~Cluster, # This tells plotly to draw separate lines for each cluster
    line = list(
        color = ~LogCases, # Color by log-transformed cases
        colorscale = "Viridis",
        cmin = min_log_cases,
        cmax = max_log_cases,
        width = 10,
        showscale = FALSE # Hide individual scale, we'll use the marker scale
    ),
    hoverinfo = "none", # Hover is handled by the markers
    showlegend = FALSE
  )
  
  # --- Add all markers in a single call (now at log-scaled heights) ---
  p <- p %>% add_trace(
    data = data,
    type = "scatter3d",
    mode = "markers",
    x = ~Longitude, y = ~Latitude, z = ~LogCases, # Now using log-scaled height
    marker = list(
        size = 5,
        color = ~LogCases, # Color by log-transformed cases
        colorscale = "Viridis",
        cmin = min_log_cases,
        cmax = max_log_cases,
        showscale = TRUE, # Show the main color bar here
        colorbar = list(
            title = list(text = "Log(Cases)", font = list(size = 14)),
            tickvals = log1p(c(0, 10, 50, 100, 500, 2000, 7000)),
            ticktext = c("0", "10", "50", "100", "500", "2000", "7000"),
            len = 0.8, thickness = 10, x = 1.02
        )
    ),
    hoverinfo = "text",
    text = ~paste(
        "<b>", Cluster, "</b>",
        "<br>Cases: ", Cases,
        "<br>Log(Cases): ", round(LogCases, 2),
        "<br>Latitude: ", round(Latitude, 4),
        "<br>Longitude: ", round(Longitude, 4)
    ),
    showlegend = FALSE
  )

  # Configure layout with log-scaled z-axis labels
  p <- p %>% layout(
    scene = list(
      xaxis = list(title = "Longitude", range = c(map_lon_min, map_lon_max)),
      yaxis = list(title = "Latitude", range = c(map_lat_min, map_lat_max)),
      zaxis = list(
        title = "Log(Cases)",
        tickvals = log1p(c(0, 10, 50, 100, 500, 2000, 7000)),
        ticktext = c("0", "10", "50", "100", "500", "2000", "7000")
      ),
      aspectmode = "manual",
      aspectratio = list(x = 1.780793, y = 1, z = 0.5),
      camera = list(eye = list(x = 1.5, y = 1.5, z = 1.2))
    ),
    title = list(text = "COVID-19 Clusters in Dormitories and Construction Sites in Singapore (Log Scale)", font = list(size = 16)),
    margin = list(r = 100) # Add right margin for colorbar
  )
  
  return(p)
}

# Create map surface
map_surface <- create_map_surface("singapore_map.png", 
                                  c(map_lon_min, map_lon_max), 
                                  c(map_lat_min, map_lat_max))

p_final <- create_enhanced_3d_plot(cluster_data, map_surface)
print("Final 3D plot with log-scaled heights and consistent colors:")
print(p_final)


```

```{r}
library(plotly)
library(dplyr)
library(png) 

# Your cluster data
cluster_data <- data.frame(
  Cluster = c(
    "Westlite Toh Guan", "Seletar Aerospace Heights", "Wizlearn Technologies Pte Ltd",
    "Shaw Lodge", "Cochrane Lodge I", "Sungei Kadut Avenue", "S11 Dormitory",
    "Cassia @ Penjuru", "North Coast Lodge", "Kranji Lodge I", "Sungei Tengah Lodge",
    "Tuas View Dormitory", "Acacia Lodge", "Kallang Dormitory",
    "Woodlands Industrial Park E", "Kenyon/UBS construction site (9 Penang Road)",
    "Tampines Dormitory", "CitiWall", "Westlite Woodlands dormitory", "Project Glory",
    "Keppel Shipyard", "NUH renovation site 2", "Kian Teck Crescent dormitory",
    "Kian Teck Dormitory", "ABC Hostel", "Balestier Road", "Tech Park Crescent dormitory",
    "PPT Lodge 1A", "Cochrane Lodge II", "Toh Guan Dormitory", "Mandai Lodge",
    "B Senoko Loop", "Kranji Dormitory"
  ),
  Cases = c(
    110, 5, 14, 24, 5331, 31, 797, 15, 18, 20, 279, 43, 5685, 536,
    127, 15, 61, 6, 10, 49, 22, 610, 4, 3, 7234, 8, 19, 18, 46, 83,
    721, 20, 9
  ),
  Latitude = c(
    1.336479358252648, 1.405865108244157, 1.30455377557605, 1.3123931576684158,
    1.45980644632813, 1.4028727458862023, 1.4166802873317088,
    1.317990063252798, 1.4561262461581825, 1.431649046119088,
    1.3760170864098327, 1.3138839535281888, 1.3394634394670428,
    1.3105636318064642, 1.4539726758703109, 1.2981204015689285,
    1.3671327420712016, 1.335226990236874, 1.4614094228419052,
    1.2843814379289338, 1.3035148050097214, 1.293712275930711,
    1.3332887118197039, 1.3292575192376144, 1.3037227535727711,
    1.3264861535659809, 1.3094899804568734, 1.4196894054884313,
    1.461247043493767, 1.3383098374070241, 1.4065971113532223,
    1.4597830860053411, 1.4317777521462383
  ),
  Longitude = c(
    103.75174062577297, 103.86573001267531, 103.79681529986875,
    103.99766514435049, 103.820089270923, 103.75460492868525,
    103.89541919879917, 103.73190240862799, 103.78739209852215,
    103.7598430709199, 103.71880627142167, 103.62573649988938,
    103.75537536805872, 103.86661337195711, 103.79760132378739,
    103.84465551129118, 103.92941526872715, 103.90700675633154,
    103.80957678863217, 103.85011283824487, 103.65495391247237,
    103.78325522624701, 103.69239212193627, 103.69476187004331,
    103.8593811971341, 103.84630191556397, 103.63029946555761,
    103.89632074153567, 103.81837290111845, 103.75317797010463,
    103.76033024674389, 103.80255495616179, 103.75983234219238
  )
)

# Convert to numeric
cluster_data$Latitude <- as.numeric(cluster_data$Latitude)
cluster_data$Longitude <- as.numeric(cluster_data$Longitude)
cluster_data$Cases <- as.numeric(cluster_data$Cases)

# Map bounds
map_lon_min <- 103.56
map_lon_max <- 104.11
map_lat_min <- 1.14
map_lat_max <- 1.475

# Function to create the map surface
create_map_surface <- function(image_file, lon_range, lat_range, z_level = 0) {
  tryCatch({
    img <- readPNG(image_file)
    img_height <- dim(img)[1]; img_width <- dim(img)[2]
    x_seq <- seq(lon_range[1], lon_range[2], length.out = img_width)
    y_seq <- seq(lat_range[1], lat_range[2], length.out = img_height)
    z_surface <- matrix(z_level, nrow = img_height, ncol = img_width)
    if(length(dim(img)) == 3) {
      img_for_surface <- img[,,1] * 0.8 + img[,,2] * 0.1 + img[,,3] * 0.1
    } else {
      img_for_surface <- img
    }
    img_for_surface <- img_for_surface[nrow(img_for_surface):1, ]
    return(list(x=x_seq, y=y_seq, z=z_surface, surfacecolor=img_for_surface))
  }, error = function(e) { message("Could not read image file: ", e$message); return(NULL) })
}


create_enhanced_3d_plot <- function(data, map_surface = NULL) {
  # Add a log-transformed column for coloring
  data <- data %>% mutate(LogCases = log1p(Cases))
  
  # --- DATA RESTRUCTURING FOR BARS ---
  segments_data <- bind_rows(
    data %>% mutate(z = 0), # Start points
    data %>% mutate(z = Cases)  # End points
  ) %>% arrange(Cluster) # Arrange to group start/end points for the 'split' argument

  # Define the range for the color scale based on the log-transformed values
  min_log_cases <- min(data$LogCases)
  max_log_cases <- max(data$LogCases)
  
  # Create base plot
  p <- plot_ly()
  
  # Add map surface
  if(!is.null(map_surface)) {
    p <- p %>% add_surface(
      x = map_surface$x, y = map_surface$y, z = map_surface$z,
      surfacecolor = map_surface$surfacecolor,
      colorscale = list(c(0, "rgb(50,50,50)"), c(1, "rgb(200,200,200)")),
      opacity = 0.8, showscale = FALSE, hoverinfo = "skip", name = "Singapore Map"
    )
  }
  
  # --- Add all bars in a single call ---
  p <- p %>% add_trace(
    data = segments_data,
    type = "scatter3d",
    mode = "lines",
    x = ~Longitude, y = ~Latitude, z = ~z,
    split = ~Cluster, # This tells plotly to draw separate lines for each cluster
    line = list(
        color = ~LogCases, # Color by log-transformed cases
        colorscale = "Viridis",
        cmin = min_log_cases,
        cmax = max_log_cases,
        width = 10,
        showscale = FALSE # Hide individual scale, we'll use the marker scale
    ),
    hoverinfo = "none", # Hover is handled by the markers
    showlegend = FALSE
  )
  
  # --- Add all markers in a single call ---
  p <- p %>% add_trace(
    data = data,
    type = "scatter3d",
    mode = "markers",
    x = ~Longitude, y = ~Latitude, z = ~Cases,
    marker = list(
        size = 8,
        color = ~LogCases, # Color by log-transformed cases
        colorscale = "Viridis",
        cmin = min_log_cases,
        cmax = max_log_cases,
        showscale = TRUE, # Show the main color bar here
        colorbar = list(
            title = list(text = "Log(Cases)", font = list(size = 14)),
            tickvals = log1p(c(0, 10, 100, 500, 2000, 7000)),
            ticktext = c("0", "10", "100", "500", "2000", "7000"),
            len = 0.8, thickness = 10, x = 1.02
        )
    ),
    hoverinfo = "text",
    text = ~paste(
        "<b>", Cluster, "</b>",
        "<br>Cases: ", Cases,
        "<br>Latitude: ", round(Latitude, 4),
        "<br>Longitude: ", round(Longitude, 4)
    ),
    showlegend = FALSE
  )
  
  # Identify top 5 clusters
  top5 <- data %>% top_n(5, wt = Cases)
  
  # Add labels above the top 5 clusters
  p <- p %>% add_trace(
    data = top5,
    type = "scatter3d",
    mode = "text",
    x = ~Longitude, y = ~Latitude, z = ~Cases + 50,  # offset to appear above bars
    text = ~paste0(Cluster, "<br>(", Cases, " cases)"),
    textposition = "top center",
    textfont = list(color = "black", size = 12),
    hoverinfo = "none",
    showlegend = FALSE
  )

  # Configure layout
  p <- p %>% layout(
    scene = list(
      xaxis = list(title = "Longitude", range = c(map_lon_min, map_lon_max)),
      yaxis = list(title = "Latitude", range = c(map_lat_min, map_lat_max)),
      zaxis = list(title = "Cases"),
      aspectmode = "manual",
      aspectratio = list(x = 1.780793, y = 1, z = 0.5),
      camera = list(eye = list(x = 1.5, y = 1.5, z = 1.2))
    ),
    title = list(text = "COVID-19 Clusters in Dormitories and Construction Sites in Singapore", font = list(size = 16)),
    margin = list(r = 100) # Add right margin for colorbar
  )
  
  return(p)
}


# Create map surface
map_surface <- create_map_surface("singapore_map.png", 
                                  c(map_lon_min, map_lon_max), 
                                  c(map_lat_min, map_lat_max))


p_final <- create_enhanced_3d_plot(cluster_data, map_surface)
print("Final 3D plot with consistent colors:")
print(p_final)

```
