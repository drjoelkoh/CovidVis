---
title: "Tomato Project: Visualizing COVID-19 Inequities"
author: "Daniel Lip, Pierre Chan, Howard Yeo, Joel Koh, Jolie Yeo, Danish Dol, Sarah Loo"
format: html
editor: visual
---

# Introduction

The COVID-19 pandemic has underscored stark differences in health outcomes across different population groups and stages of medical care. To better understand these disparities, we present a series of visualizations that explore infection patterns, case severity, and system responses in Singapore between 2020 and 2021. This analysis leverages official MOH data to identify key phases of the pandemic, highlight outbreak spikes in vulnerable populations such as migrant workers, and assess the proportional severity of cases using standardized and log-scaled metrics. These visual tools aim to uncover not just what happened, but also who was affected, and to what extent.

# Load Libraries

```{r}
#| label: Load Libraries

# Load necessary libraries
library(tidyverse)
library(lubridate)
library(fmsb)
```

# Load Dataset

```{r}
#| label: Load Covid 19 Dataset

# Load the dataset
covid_data <- read_csv("covid19_sg.csv")
covid_data

# Count total number of NA values before cleaning
total_na_before <- sum(is.na(covid_data))
print(paste("Total NA values before cleaning:", as.numeric(total_na_before)))

```

# Data Cleaning

```{r}
#| label: Data cleaning Process

# Clean dataset: replace NA in numeric columns with 0
covid_data <- covid_data %>%
  mutate(
    'Perc population completed at least one dose' = as.numeric(`Perc population completed at least one dose`),
    'Perc population completed vaccination' = as.numeric(`Perc population completed vaccination`),
    'Perc population taken booster shots' = as.numeric(`Perc population taken booster shots`),
  )

# Clean dataset: replace NA in numeric columns with 0
covid_clean <- covid_data %>%
  mutate(across(where(is.numeric), ~replace_na(., 0)))

# Count total number of 0s in numeric columns after cleaning
total_zeros_after <- covid_clean %>%
  select(where(is.numeric)) %>%
  summarise_all(~sum(. == 0)) %>%
  unlist() %>%
  sum()

print(paste("Total 0 values after cleaning:", as.numeric(total_zeros_after)))

```

# Density Areas of Dorms and Comms

```{r}
#| label: Define density areas for dormitories and communities

# Define 2020 values
dorm_population_2020      <- 311100
dorm_land_area_2020       <- 5.0
community_population_2020 <- 5685807
community_land_area_2020  <- 723.3

# Define 2021 values
dorm_population_2021      <- 318500
dorm_land_area_2021       <- 5.0
community_population_2021 <- 5453566
community_land_area_2021  <- 728.1

# Add density-adjusted rates based on year
covid_clean <- covid_clean %>%
  mutate(
    year = lubridate::year(Date),

    dorm_cases_density_rate = case_when(
      year == 2020 ~ (`Local cases residing in dorms MOH report` / dorm_population_2020) * 100000 / dorm_land_area_2020,
      year == 2021 ~ (`Local cases residing in dorms MOH report` / dorm_population_2021) * 100000 / dorm_land_area_2021,
      TRUE         ~ NA_real_
    ),
    
    community_cases_density_rate = case_when(
      year == 2020 ~ (`Local cases not residing in doms MOH report` / community_population_2020) * 100000 / community_land_area_2020,
      year == 2021 ~ (`Local cases not residing in doms MOH report` / community_population_2021) * 100000 / community_land_area_2021,
      TRUE         ~ NA_real_
    )
  )

```

# Severity Radar Chart

```{r}
#| label: Display Severity Radar chart (Deaths, ICU, Hospitalised rates)
#| fig-width: 10
#| fig-height: 5.5
#| dpi: 300
#| echo: false

# Summarise total counts
covid_severity_summary <- covid_clean %>%
  filter(Date >= as.Date("2020-04-01") & Date <= as.Date("2020-09-30")) %>%
  summarise(
    TotalDeaths = sum(`Daily Deaths`, na.rm = TRUE),
    TotalICU = sum(`Intensive Care Unit (ICU)`, na.rm = TRUE),
    TotalHospitalised = sum(`Still Hospitalised`, na.rm = TRUE)
  )

# Log-transform + scale to [0,100]
log_scaled <- covid_severity_summary %>%
  mutate(
    Deaths = log1p(TotalDeaths),
    ICU = log1p(TotalICU),
    Hospitalised = log1p(TotalHospitalised)
  ) %>%
  select(Deaths, ICU, Hospitalised)

log_max <- max(log_scaled)
scaled_values <- log_scaled / log_max * 100
scaled_values <- round(scaled_values, 2)

# Prepare radar data
radar_data <- rbind(
  c(100, 100, 100),               # Max
  c(0, 0, 0),                     # Min
  as.numeric(scaled_values)      # Actual values
)
radar_data <- as.data.frame(radar_data)
colnames(radar_data) <- c("", "", "")
rownames(radar_data) <- c("Max", "Min", "Severity")

# Plot to screen
radarchart(
  radar_data,
  axistype = 1,
  pcol = "darkred",
  pfcol = rgb(0.8, 0.2, 0.2, 0.4),
  plwd = 2,
  plty = 1,
  title = "COVID-19 Severity Radar: Apr–Sep 2020 (Log Scaled 0–100)",
  cglcol = "grey70", cglty = 1, cglwd = 0.8,
  axislabcol = "grey20",
  caxislabels = seq(0, 100, by = 25),
  vlcex = 0.9
)

# Add raw values next to axis labels
label_angles_deg <- c(90, 210, 330)
label_angles_rad <- label_angles_deg * pi / 180
label_radius <- 1.15  # place labels slightly outside the radar

label_texts <- c(
  paste0("Deaths (", covid_severity_summary$TotalDeaths, ")"),
  paste0("ICU (", covid_severity_summary$TotalICU, ")"),
  paste0("Hospitalised (", covid_severity_summary$TotalHospitalised, ")")
)

for (i in 1:3) {
  x <- label_radius * cos(label_angles_rad[i])
  y <- label_radius * sin(label_angles_rad[i])
  text(x, y, labels = label_texts[i], cex = 0.9, font = 2)
}

# Add legends
legend("topright",
       legend = c("Proportional Severity"),
       col = "darkred", lty = 1, lwd = 2, bty = "n")

legend("bottomleft",
       legend = c("0 = Lowest log-scaled severity", "100 = Highest log-scaled severity"),
       text.col = "grey20", bty = "n", cex = 0.8)

# Save as image
invisible(dev.copy(png, "covid_severity_radar.png", width = 1500, height = 800, res = 150))
invisible(dev.off())

```

::: notes
**Notes on Severity Metrics (Apr–Sep 2020):**\
1. **Hospitalisations** were the most frequent severe outcome, totaling 88,869 — influenced by policies requiring all positive cases to be admitted.\
2. **ICU admissions** (1,328) were significantly fewer, reflecting effective triage, younger patient profile, and adequate healthcare capacity.\
3. **Deaths** (24) remained exceptionally low during this period, likely due to robust containment within vulnerable groups and strong healthcare response.\
4. Severity values are log-scaled and normalized to emphasize proportional differences across outcome types.
:::

# Density Based Plot (Z-score)

```{r}
#| label: Display Z-score Normalized Density Plot
#| fig-width: 11
#| fig-height: 6
#| dpi: 300
#| fig-align: "center"
#| echo: false

# Prepare long-form data
covid_long <- covid_clean %>%
  select(Date, dorm_cases_density_rate, community_cases_density_rate) %>%
  pivot_longer(cols = -Date, names_to = "Group", values_to = "Rate") %>%
  mutate(
    Date = as.Date(Date),
    Group = recode(Group,
                   "dorm_cases_density_rate" = "Dormitories",
                   "community_cases_density_rate" = "Community")
  ) %>%
  filter(Date >= as.Date("2020-04-01") & Date <= as.Date("2021-12-31"))

# Z-score normalization per group
covid_long <- covid_long %>%
  group_by(Group) %>%
  mutate(
    Rate_trans = (Rate - mean(Rate, na.rm = TRUE)) / sd(Rate, na.rm = TRUE)
  ) %>%
  ungroup()

# Find dormitory peak (in original scale for annotation reference)
peak_dorm <- covid_long %>%
  filter(Group == "Dormitories") %>%
  filter(Rate == max(Rate, na.rm = TRUE)) %>%
  slice(1)

peak_date <- peak_dorm$Date
peak_rate <- peak_dorm$Rate

# Phase rectangle definitions
phase_rectangles <- tibble(
  xmin = as.Date(c("2020-04-01", "2020-04-07", "2020-06-01", "2020-06-19", 
                   "2020-12-28", "2021-05-16", "2021-08-10", "2021-10-01")),
  xmax = as.Date(c("2020-04-07", "2020-06-01", "2020-06-19", "2020-12-28",
                   "2021-05-16", "2021-08-10", "2021-10-01", "2021-12-31")),
  Phase = c("Pre-Circuit Breaker", "Circuit Breaker", "Phase 1", "Phase 2", 
            "Phase 3", "Heightened Alert", "Preparatory Stage", "Stabilisation/Transition Phase"),
  fill_color = c("#E8F5E8", "#FFE4E1", "#E6F3FF", "#F0E6FF", 
                 "#FFF8DC", "#FFE4B5", "#E0FFE0", "#F5F5DC")
)

phase_dates <- tibble(
  Date = as.Date(c("2020-04-07", "2020-06-01", "2020-06-19", "2020-12-28",
                   "2021-05-16", "2021-08-10", "2021-10-01", "2021-12-27")),
  Phase = c("Circuit Breaker", "Phase 1", "Phase 2", "Phase 3",
            "Heightened Alert", "Preparatory Stage", "Stabilisation Phase", "Transition Phase")
)

max_y <- max(covid_long$Rate_trans, na.rm = TRUE)
label_y <- max_y * 0.6

# Z-score normalized plot with annotations
z_score_plot <- ggplot(covid_long, aes(x = Date, y = Rate_trans, color = Group)) +
  
  geom_rect(data = phase_rectangles, 
            aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill = Phase),
            inherit.aes = FALSE, alpha = 0.3) +
  scale_fill_manual(values = setNames(phase_rectangles$fill_color, phase_rectangles$Phase),
                    name = "Phase", guide = "none") +
  
  geom_line(size = 0.8) +

  geom_point(
    data = peak_dorm, 
    aes(x = Date, y = Rate_trans), 
    color = "steelblue", size = 2.5
  ) +
  annotate(
    "text",
    x = peak_dorm$Date + 5,
    y = peak_dorm$Rate_trans,
    label = paste0("Peak Z-score: ", round(peak_dorm$Rate_trans, 2)),
    hjust = 0,
    size = 3.2,
    color = "steelblue"
  ) +

  geom_vline(data = phase_dates, aes(xintercept = Date),
             linetype = "dashed", color = "black", alpha = 0.7) +
  geom_text(
    data = phase_dates,
    aes(x = Date - 6, y = label_y, label = Phase),
    inherit.aes = FALSE,
    angle = 90,
    hjust = 1,
    vjust = 0.5,
    size = 3.2,
    color = "black"
  ) +

  annotate("text",
           x = as.Date("2020-04-14") + 11,
           y = 5.3,
           label = "Event 1",
           hjust = 0, size = 3, color = "darkgreen") +
  annotate("text",
           x = as.Date("2020-07-30") - 20,
           y = 4.1, 
           label = "Event 2",
           hjust = 0, size = 3, color = "darkred") +
  annotate("text",
           x = as.Date("2020-08-20") - 8,
           y = 2,
           label = "Event 3",
           hjust = 0, size = 3, color = "darkgreen") +
  annotate("text",
           x = as.Date("2021-09-01") - 10,
           y = 2,
           label = "Event 4",
           hjust = 0, size = 3, color = "darkred") +
  annotate("text",
           x = as.Date("2021-9-27") + 40,
           y = 4.2,
           label = "Event 5",
           hjust = 0, size = 3, color = "darkgreen") +

  scale_color_manual(values = c("Dormitories" = "steelblue", "Community" = "firebrick")) +

  scale_x_date(
    breaks = seq(as.Date("2020-04-01"), as.Date("2021-12-31"), by = "3 months"),
    date_labels = "%b\n%Y",
    limits = c(as.Date("2020-04-01"), as.Date("2021-12-31"))
  ) +

  theme_minimal(base_size = 14) +
  theme(
    legend.position = "top",
    plot.title = element_text(face = "bold", size = 16),
    plot.subtitle = element_text(size = 13),
    plot.margin = margin(t = 40, r = 20, b = 20, l = 20),
    panel.grid.major = element_line(color = alpha("black", 0.1), size = 0.5),
    panel.grid.minor = element_line(color = alpha("black", 0.05), size = 0.3)
  ) +
  labs(
    title = "Z-Score Normalized COVID-19 Case Rates by Group",
    subtitle = "Standardized per-group density-adjusted rates (Apr 2020 – Dec 2021)",
    x = "Covid-19 Pandemic Timeline",
    y = "Z-Score of Case Rate",
    color = "Population Group"
  )

z_score_plot_clean <- z_score_plot +
  labs(caption = NULL)

z_score_plot_clean

```

::: notes
**Notes on Major Events:**

1\. Apr 2020: Dormitory outbreak, strict quarantine, mass testing → rapid decline.\
2. Jul 2020: Mass testing ramp-up → backlog of asymptomatic cases.\
3. Aug 2020: Dorms cleared, strict protocols → drop in rates.\
4. Sep 2021: Spike from easing restrictions, breakthrough infections in vulnerable.\
5. Oct 2021: Restrictions reinstated → fall in cases.
:::

## Saving Z-score plot with Captions

```{r}
#|label: Saving Z-score Normalized Density Plot

caption_text <- paste(
  "Notes:",
  "1. Apr 2020: Dormitory outbreak, strict quarantine, mass testing → rapid decline.",
  "2. Jul 2020: Mass testing ramp-up → backlog of asymptomatic cases.",
  "3. Aug 2020: Dorms cleared, strict protocols → drop in rates.",
  "4. Sep 2021: Spike from easing restrictions, breakthrough infections in vulnerable.",
  "5. Oct 2021: Restrictions reinstated → fall in cases.",
  sep = "\n"
)


# Add caption back for saving
z_score_plot_annotated <- z_score_plot +
  labs(caption = caption_text)

ggsave("covid_density_zscore_scaled.png", plot = z_score_plot_annotated,
       width = 11, height = 6.5, dpi = 300,
       device = "png", bg = "white")
```

# Conclusion

Through this visual analysis, we uncovered how COVID-19’s impact in Singapore varied not just over time, but across population groups and care outcomes. Dormitory outbreaks during early 2020 exposed systemic vulnerabilities, while community cases remained comparatively lower until later waves. By normalizing for population density and scaling severity outcomes, we provided a fairer lens to compare disproportionate risks and burdens. These findings emphasize the importance of equity-driven public health strategies where data transparency, targeted intervention, and structural reform are essential to protect the most vulnerable in future crises.
